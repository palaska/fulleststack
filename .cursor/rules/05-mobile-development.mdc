---
description: "Mobile development guidelines for Expo React Native app using Expo Router, NativeWind, and better-auth integration"
globs:
alwaysApply: false
---

# Mobile Development Guidelines

The mobile app is built with **Expo** and **React Native**, using **Expo Router** for file-based routing and **NativeWind** for Tailwind CSS styling.

## Core Technologies

- **Framework**: Expo (~53.0.8) with React Native
- **Routing**: Expo Router (~5.0.6) for file-based navigation
- **Styling**: NativeWind (^4.1.23) for Tailwind CSS in React Native
- **Authentication**: @better-auth/expo for native auth flows
- **Navigation**: @react-navigation/bottom-tabs + @react-navigation/native
- **API Client**: Shared @fulleststack/api-client package
- **UI Kit**: @fulleststack/ui for shared utilities
- **Icons**: @expo/vector-icons and expo-symbols
- **Testing**: Jest with jest-expo preset

## Architecture Patterns

### App Structure with Expo Router

The app follows Expo Router file-based routing conventions:

```
app/
├── _layout.tsx              # Root layout
├── (tabs)/                  # Tab group
│   ├── _layout.tsx          # Tab navigator layout
│   ├── index.tsx            # Home tab
│   └── profile.tsx          # Profile tab
├── (protected)/             # Protected route group
│   ├── _layout.tsx          # Auth guard layout
│   └── dashboard.tsx        # Protected dashboard
├── auth/                    # Authentication screens
│   ├── login.tsx            # Login screen
│   └── register.tsx         # Register screen
├── modal.tsx                # Modal screen
└── +not-found.tsx           # 404 screen
```

### Navigation Patterns

Expo Router provides automatic navigation based on file structure:

```typescript
// Programmatic navigation
import { router } from "expo-router";

// Navigate to a route
router.push("/profile");
router.replace("/dashboard");

// Navigate with parameters
router.push({
  pathname: "/task/[id]",
  params: { id: taskId }
});
```

### Tab Navigation Setup

Use bottom tabs for main navigation:

```typescript
// (tabs)/_layout.tsx
import { Tabs } from 'expo-router';
import { TabBarIcon } from '@/components/navigation/TabBarIcon';

export default function TabLayout() {
  return (
    <Tabs screenOptions={{ tabBarActiveTintColor: 'blue' }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => <TabBarIcon name="home" color={color} />
        }}
      />
    </Tabs>
  );
}
```

## Best Practices

### Styling with NativeWind

- Use NativeWind for Tailwind CSS classes in React Native
- Configure with shared Tailwind config from web app
- Use className prop for all styling (no StyleSheet)
- Follow responsive design patterns for different screen sizes

```typescript
import { View, Text } from 'react-native';

export default function Component() {
  return (
    <View className="flex-1 bg-white p-4">
      <Text className="text-xl font-bold text-gray-900 mb-4">
        Mobile Component
      </Text>
    </View>
  );
}
```

### Authentication Integration

- Use @better-auth/expo for native authentication
- Implement secure storage with expo-secure-store
- Handle authentication state across the app
- Use proper deep linking for auth redirects

```typescript
import { useAuth } from '@better-auth/expo';

export default function AuthScreen() {
  const { signIn, signOut, user, isLoading } = useAuth();

  if (isLoading) return <LoadingScreen />;

  return user ? <Dashboard /> : <LoginForm />;
}
```

### Route Protection

Implement authentication guards with layouts:

```typescript
// (protected)/_layout.tsx
import { Redirect } from 'expo-router';
import { useAuth } from '@/hooks/useAuth';

export default function ProtectedLayout() {
  const { isLoggedIn, isLoading } = useAuth();

  if (isLoading) return <LoadingScreen />;
  if (!isLoggedIn) return <Redirect href="/auth/login" />;

  return <Slot />;
}
```

### Data Fetching

- Use the shared API client from @fulleststack/api-client
- Implement proper loading states for mobile UX
- Handle offline scenarios gracefully
- Use React Query for caching (if needed)

### Native Features Integration

- Use expo-haptics for touch feedback
- Use expo-blur for native blur effects
- Use expo-system-ui for status bar management
- Use expo-constants for app configuration

### Component Patterns

- Follow React Native component patterns
- Use proper TypeScript interfaces
- Export components as default exports
- Use React Native specific components (View, Text, etc.)

```typescript
interface ButtonProps {
  title: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary';
}

export default function Button({ title, onPress, variant = 'primary' }: ButtonProps) {
  return (
    <Pressable
      className={`px-4 py-2 rounded-lg ${
        variant === 'primary' ? 'bg-blue-600' : 'bg-gray-200'
      }`}
      onPress={onPress}
    >
      <Text className={`text-center font-medium ${
        variant === 'primary' ? 'text-white' : 'text-gray-900'
      }`}>
        {title}
      </Text>
    </Pressable>
  );
}
```

### Performance Optimization

- Use React Native performance best practices
- Implement proper list optimization with FlatList
- Use lazy loading for heavy components
- Optimize images with expo-image
- Use proper navigation options for better performance

### Development & Testing

- Use Expo CLI for development: `expo start`
- Test on both iOS and Android simulators
- Use Jest with jest-expo for unit testing
- Follow the shared ESLint configuration
- Use Expo DevTools for debugging

### Build & Deployment

- Use EAS Build for production builds
- Configure app.json/app.config.js properly
- Set up proper app icons and splash screens
- Handle different build variants (development, staging, production)

### Platform-Specific Code

```typescript
import { Platform } from "react-native";

const styles = {
  container: Platform.select({
    ios: "pt-12", // For iOS status bar
    android: "pt-8",
  }),
};
```

Reference files: [apps/mobile/package.json](mdc:apps/mobile/package.json), [apps/mobile/app/\_layout.tsx](mdc:apps/mobile/app/_layout.tsx)

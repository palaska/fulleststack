---
description: "Database development guidelines using Drizzle ORM with Turso (libSQL), including schema patterns and migration practices"
globs:
alwaysApply: false
---

# Database Development Guidelines

The database layer uses **Drizzle ORM** with **Turso (libSQL)** for type-safe database operations and automatic schema generation.

## Core Technologies

- **ORM**: Drizzle ORM with libSQL driver
- **Database**: Turso (libSQL) - SQLite-compatible
- **Schema Validation**: drizzle-zod for automatic Zod schema generation
- **Migrations**: drizzle-kit for schema migrations
- **Authentication Schema**: Generated via better-auth CLI

## Architecture Patterns

### Database Connection

Always use the factory pattern for database creation:

```typescript
export function createDb(env: Pick<Environment, "TURSO_URL" | "TURSO_AUTH_TOKEN">): Db {
  return drizzle({
    connection: {
      url: env.TURSO_URL,
      authToken: env.TURSO_AUTH_TOKEN,
    },
    casing: "snake_case", // Always use snake_case for database
    schema, // Import all schemas
  });
}
```

### Schema Organization

Schemas are organized by feature with consistent patterns:

```
src/db/
├── schema.ts           # Main schema export (re-exports all)
├── auth.schema.ts      # Generated by better-auth CLI
├── tasks.schema.ts     # Feature-specific schemas
└── migrations/         # Generated migration files
```

### Table Definition Patterns

```typescript
export const tasks = sqliteTable("tasks", {
  // Primary keys: Use integer with autoIncrement for business entities
  id: integer({ mode: "number" }).primaryKey({ autoIncrement: true }),

  // Text fields: Always specify constraints
  name: text().notNull(),

  // Booleans: Use integer mode with defaults
  done: integer({ mode: "boolean" }).notNull().default(false),

  // Foreign keys: Always include onDelete behavior
  createdBy: text().references(() => users.id, { onDelete: "cascade" }).notNull(),

  // Timestamps: Use integer mode with auto-generated defaults
  createdAt: integer({ mode: "timestamp" }).notNull().$defaultFn(() => new Date()),
  updatedAt: integer({ mode: "timestamp" }).notNull().$defaultFn(() => new Date()).$onUpdate(() => new Date()),
});
```

### Schema Validation Integration

Always generate Zod schemas from Drizzle schemas:

```typescript
// Generate insert/select schemas with validation
export const insertTasksSchema = createInsertSchema(tasks, {
  name: schema => schema.min(1).max(500), // Add custom validation
}).required({
  done: true, // Override optionality
}).omit({
  id: true, // Remove auto-generated fields
  createdBy: true, // Remove server-managed fields
  createdAt: true,
  updatedAt: true,
});

export const selectTasksSchema = createSelectSchema(tasks);
export type InsertTasksSchema = z.infer<typeof insertTasksSchema>;
export type SelectTasksSchema = z.infer<typeof selectTasksSchema>;
```

## Best Practices

### Schema Design

- Use `snake_case` for database columns (enforced by casing config)
- Use `camelCase` in TypeScript schema definitions
- Always include `createdAt` and `updatedAt` timestamps
- Use proper foreign key constraints with cascade behavior
- Use `integer` mode for timestamps and booleans

### Query Patterns

- Use query builder for complex queries: `db.query.tableName.findMany()`
- Use raw SQL for simple operations: `db.select().from(table)`
- Always order results explicitly: `orderBy(desc(fields.createdAt))`
- Use transactions for multi-table operations

### Migrations

- Generate migrations with: `pnpm --filter api db:generate`
- Apply to development: `pnpm --filter api db:push`
- Review generated SQL before deploying
- Never edit migration files manually

### Authentication Schema

- Regenerate auth schema when updating better-auth:
  ```bash
  pnpm --filter api generate-auth-schema
  ```
- Keep auth schema separate from business schemas
- Never modify auth schema manually

### Type Safety

- Export both insert and select schemas for each table
- Use `createInsertSchema` and `createSelectSchema` consistently
- Add custom validation to insert schemas
- Omit server-managed fields from insert schemas

### Environment Configuration

- Use separate configs for development and production
- Configure drizzle.config.ts for migrations
- Use `.dev.vars` for local development
- Validate database URLs in environment schema

Reference files: [apps/api/src/db/index.ts](mdc:apps/api/src/db/index.ts), [apps/api/src/db/tasks.schema.ts](mdc:apps/api/src/db/tasks.schema.ts), [apps/api/drizzle.config.ts](mdc:apps/api/drizzle.config.ts)

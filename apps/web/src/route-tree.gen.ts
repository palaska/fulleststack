/* eslint-disable eslint-comments/no-unlimited-disable */

/* eslint-disable */

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SigninImport } from './routes/signin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as TaskIdImport } from './routes/task/$id'
import { Route as TaskIdEditImport } from './routes/task/$id.edit'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdRoute = TaskIdImport.update({
  id: '/task/$id',
  path: '/task/$id',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdEditRoute = TaskIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TaskIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/task/$id': {
      id: '/task/$id'
      path: '/task/$id'
      fullPath: '/task/$id'
      preLoaderRoute: typeof TaskIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/task/$id/edit': {
      id: '/task/$id/edit'
      path: '/edit'
      fullPath: '/task/$id/edit'
      preLoaderRoute: typeof TaskIdEditImport
      parentRoute: typeof TaskIdImport
    }
  }
}

// Create and export the route tree

interface TaskIdRouteChildren {
  TaskIdEditRoute: typeof TaskIdEditRoute
}

const TaskIdRouteChildren: TaskIdRouteChildren = {
  TaskIdEditRoute: TaskIdEditRoute,
}

const TaskIdRouteWithChildren =
  TaskIdRoute._addFileChildren(TaskIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/task/$id': typeof TaskIdRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/task/$id': typeof TaskIdRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/task/$id': typeof TaskIdRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/signup'
    | '/task/$id'
    | '/admin'
    | '/task/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/signup' | '/task/$id' | '/admin' | '/task/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/signin'
    | '/signup'
    | '/task/$id'
    | '/admin/'
    | '/task/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
  TaskIdRoute: typeof TaskIdRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
  TaskIdRoute: TaskIdRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/signin",
        "/signup",
        "/task/$id",
        "/admin/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/task/$id": {
      "filePath": "task/$id.tsx",
      "children": [
        "/task/$id/edit"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/task/$id/edit": {
      "filePath": "task/$id.edit.tsx",
      "parent": "/task/$id"
    }
  }
}
ROUTE_MANIFEST_END */
